==Install==
npm install react-router-dom

Обернуть компонент, в котором нужно настроить роутинг в компонент BrowserRouter из пакета react-router-dom.
Обычно оборачивают <App/> в index.js
  <BrowserRouter>
    <App />
  </BrowserRouter>


==Регистрация роута==
1. Импортировать компонент Route из react-router-dom
2. Добавить компонент Route в месте, где необходимо динамически загружать новый компонент
3. Конфигурация компонента Route:
    <Route
        path='/' - путь, который должен обрабатывать данный компонент.
        render={ () => <h1>Some content</h1> } - контент, который должен отрендерить данный роут
        exact - указывает, что роут должен обрабатывать точное совпадение путей. Без этого атрибута / будет обрабатываться если путь /some
        component={ComponentName} - указывает, какой компонент должен отрендерить данный роут
    />


==Навигация между страницами==
1. Импортировать компонент NavLink из react-router-dom
2. Вместо обычных ссылок указать компонент NavLink
3. Конфигурация компонента NavLink
    <NavLink
        to='/' - путь, который должен быть обработан (аналог href). Вместо строки можно указать объект:
        to={{
            pathname: '/', - путь, который должен быть обработан
            search: '?a=1&b=2', - параметры, которые будут добавлены к адресу
            hash: '#hash' - хеш, который будет добавлен к адресу
        }}
        exact - указывает, что компонент должен обрабатывать точное совпадение путей
        activeClassName={'active-class'} - указывает класс, который должен быть добавлен к ссылке, если она активна
        activeColor={{<styles>}} - стили для активного состояния
    />


==Программная навигация==
В props компонента рендере компонента с помощью Route ему передаются props, которые содержат параметры, которые позволяют програмно
манипулировать роутингом. Чтобы передать эти параметры в компонент, который не содержит роутинга необходимо или передать в него
{...this.props} или, что лучше, импортировать компонент withRouter, в которую необходимо обернуть нужный компонент:
    export default withRoutes(Component);
Конфигурация:
    this.props.history.push('/') - переход на какую-либо страницу (альернативно принимает в качестве параметра объект


==Динамические роуты==
1. Чтобы указать динамический роут, необходимо после /  указать ':<название параметра>' ('/car/:name'). В компоненте, который
должен быть отображён при текущем урле необходимо получить эти параметры из объекта this.props.match.params.<название параметра>
2. Импортировать компонент Switch из пакета react-router-dom
3. Обернуть компоненты Route в помпонент Switch. Switch показывает первый один компонент, который был указан в списке компонентов Route


==Редирект при переходе на несуществующую страницу==
Способ 1:
    Объявить новый компонент Route без атрибута path в конце компонента Switch. Таким образом данный Route будет обработан
    если не будет выполнен ни один из предыдущих компонентов Route с атрибутом path.
Способ 2:
    1. Добавить компонент Switch
    2. Импортировать компонент Redirect из пакета react-router-dom и добавить его в конце компонент Switch
    3. Конфигурация компонента Redirect:
        <Redirect
            to={'/path-2'} - путь, на который должен быть выполент переход
        />


==Защита роутов==
1. Определить состояние, при котором необходимо защищать роуты
2. Выводить компонент Route при определённом состоянии
    {this.state.isLoggedIn ? <Route path='/path' component={Component} /> : null}

==Роутинг для кастомных компонентов==
1. Можно обернуть кастомный компонент в компонент NavLink
2. Также можно импортируем компонент Link из react-router-dom. Это аналог NavLink с меньшим функционалом. Ему достаточно добавить атрибут
to с нужным путем.
    <Link to='/component'><Component/></Link>